diff --git a/env.c b/env.c
index 94c72a3..f96ace7 100644
--- a/env.c
+++ b/env.c
@@ -1245,7 +1245,7 @@ initialize_env (void)
 
   /* Not strictly environment related, but ordering constructors is tricky.  */
   pthread_attr_init (&gomp_thread_attr);
-  pthread_attr_setdetachstate (&gomp_thread_attr, PTHREAD_CREATE_DETACHED);
+  //pthread_attr_setdetachstate (&gomp_thread_attr, PTHREAD_CREATE_DETACHED);
 
   if (parse_stacksize ("OMP_STACKSIZE", &stacksize)
       || parse_stacksize ("GOMP_STACKSIZE", &stacksize))
diff --git a/libgomp.h b/libgomp.h
index a1482cc..13198ae 100644
--- a/libgomp.h
+++ b/libgomp.h
@@ -441,6 +441,9 @@ struct gomp_thread
 
   /* User pthread thread pool */
   struct gomp_thread_pool *thread_pool;
+
+  /* Almalence: required to guarantee thread finalizing*/
+  pthread_t pt;
 };
 
 
@@ -479,9 +482,17 @@ static inline struct gomp_thread *gomp_thread (void)
 }
 #else
 extern pthread_key_t gomp_tls_key;
+extern struct gomp_thread *create_non_tls_thread_data (void);
 static inline struct gomp_thread *gomp_thread (void)
 {
-  return pthread_getspecific (gomp_tls_key);
+  struct gomp_thread *thr = pthread_getspecific (gomp_tls_key);
+  
+  if(thr == NULL)
+  {
+    thr = create_non_tls_thread_data ();
+  }
+  
+  return thr;
 }
 #endif
 
diff --git a/team.c b/team.c
index e6a6d8f..8b96c80 100644
--- a/team.c
+++ b/team.c
@@ -43,6 +43,45 @@ __thread struct gomp_thread gomp_tls_data;
 pthread_key_t gomp_tls_key;
 #endif
 
+struct thread_root_queue
+{
+  struct thread_root_queue * next;
+  struct gomp_thread * data;
+};
+
+struct thread_root_queue * queue_head = NULL;
+gomp_mutex_t queue_mutex;
+
+struct gomp_thread * thread_root_get (void)
+{
+  struct gomp_thread * thr = NULL;
+
+  gomp_mutex_lock(&queue_mutex);
+
+  if (queue_head != NULL)
+  {
+    struct thread_root_queue * t = queue_head;
+    thr = queue_head->data;
+    queue_head = queue_head->next;
+    free(t);
+  }
+
+  gomp_mutex_unlock(&queue_mutex);
+  
+  return thr;
+}
+
+void thread_root_put (struct gomp_thread * thread)
+{
+  gomp_mutex_lock(&queue_mutex);
+
+  struct thread_root_queue * t = malloc(sizeof(struct thread_root_queue));
+  t->next = queue_head;
+  t->data = thread;
+  queue_head = t;
+
+  gomp_mutex_unlock(&queue_mutex);
+}
 
 /* This structure is used to communicate across pthread_create.  */
 
@@ -86,6 +125,7 @@ gomp_thread_start (void *xdata)
   thr->ts = data->ts;
   thr->task = data->task;
   thr->place = data->place;
+  thr->pt = pthread_self();
 
   thr->ts.team->ordered_release[thr->ts.team_id] = &thr->release;
 
@@ -210,10 +250,13 @@ gomp_free_pool_helper (void *thread_pool)
   struct gomp_thread *thr = gomp_thread ();
   struct gomp_thread_pool *pool
     = (struct gomp_thread_pool *) thread_pool;
-  gomp_barrier_wait_last (&pool->threads_dock);
   gomp_sem_destroy (&thr->release);
   thr->thread_pool = NULL;
   thr->task = NULL;
+#ifndef HAVE_TLS
+  pthread_setspecific(gomp_tls_key, NULL);
+#endif
+  gomp_barrier_wait_last (&pool->threads_dock);
   pthread_exit (NULL);
 }
 
@@ -222,16 +265,29 @@ gomp_free_pool_helper (void *thread_pool)
 void
 gomp_free_thread (void *arg __attribute__((unused)))
 {
-  struct gomp_thread *thr = gomp_thread ();
+  struct gomp_thread *thr;
+  if (arg == NULL)
+    thr = gomp_thread ();
+  else
+  {
+    thr = arg;
+    pthread_setspecific(gomp_tls_key, thr);
+  }
+
   struct gomp_thread_pool *pool = thr->thread_pool;
   if (pool)
     {
       if (pool->threads_used > 0)
 	{
+    // We have to remember pthread id's because gomp_thread instances
+    // which are located in child threads stacks could be destroyed.
+    pthread_t pts[pool->threads_used];
+
 	  int i;
 	  for (i = 1; i < pool->threads_used; i++)
 	    {
 	      struct gomp_thread *nthr = pool->threads[i];
+        pts[i] = nthr->pt;
 	      nthr->fn = gomp_free_pool_helper;
 	      nthr->data = pool;
 	    }
@@ -240,6 +296,12 @@ gomp_free_thread (void *arg __attribute__((unused)))
 	  /* And this waits till all threads have called gomp_barrier_wait_last
 	     in gomp_free_pool_helper.  */
 	  gomp_barrier_wait (&pool->threads_dock);
+
+    for (i = 1; i < pool->threads_used; i++)
+    {
+      pthread_join(pts[i], NULL);
+    }
+
 	  /* Now it is safe to destroy the barrier and free the pool.  */
 	  gomp_barrier_destroy (&pool->threads_dock);
 
@@ -264,6 +326,11 @@ gomp_free_thread (void *arg __attribute__((unused)))
       gomp_end_task ();
       free (task);
     }
+
+#ifndef HAVE_TLS
+  free(thr);
+  pthread_setspecific(gomp_tls_key, NULL);
+#endif
 }
 
 /* Launch a team.  */
@@ -691,7 +758,7 @@ gomp_team_start (void (*fn) (void *), void *data, unsigned nthreads,
     {
       size_t stacksize;
       pthread_attr_init (&thread_attr);
-      pthread_attr_setdetachstate (&thread_attr, PTHREAD_CREATE_DETACHED);
+      //pthread_attr_setdetachstate (&thread_attr, PTHREAD_CREATE_DETACHED);
       if (! pthread_attr_getstacksize (&gomp_thread_attr, &stacksize))
 	pthread_attr_setstacksize (&thread_attr, stacksize);
       attr = &thread_attr;
@@ -916,22 +983,47 @@ gomp_team_end (void)
 static void __attribute__((constructor))
 initialize_team (void)
 {
+  gomp_mutex_init(&queue_mutex);
+
 #ifndef HAVE_TLS
-  static struct gomp_thread initial_thread_tls_data;
+  struct gomp_thread *initial_thread_tls_data = gomp_malloc_cleared (sizeof (struct gomp_thread));
+  thread_root_put(initial_thread_tls_data);
 
   pthread_key_create (&gomp_tls_key, NULL);
-  pthread_setspecific (gomp_tls_key, &initial_thread_tls_data);
+  pthread_setspecific (gomp_tls_key, initial_thread_tls_data);
 #endif
 
   if (pthread_key_create (&gomp_thread_destructor, gomp_free_thread) != 0)
     gomp_fatal ("could not create thread pool destructor.");
 }
 
+struct gomp_thread *create_non_tls_thread_data (void)
+{
+  struct gomp_thread *thr = gomp_malloc_cleared (sizeof (struct gomp_thread));
+  pthread_setspecific (gomp_tls_key, thr);
+
+  thread_root_put(thr);
+  
+  return thr;
+}
+
 static void __attribute__((destructor))
 team_destructor (void)
 {
   /* Without this dlclose on libgomp could lead to subsequent
      crashes.  */
+
+  struct gomp_thread * cursor = (struct gomp_thread *)thread_root_get();
+  while (cursor != NULL)
+  {
+    gomp_free_thread(cursor);
+    cursor = (struct gomp_thread *)thread_root_get();
+  }
+  gomp_mutex_destroy(&queue_mutex);
+
+#ifndef HAVE_TLS
+  pthread_key_delete (gomp_tls_key);
+#endif
   pthread_key_delete (gomp_thread_destructor);
 }
 
